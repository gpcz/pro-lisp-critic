[[https://github.com/gpcz/pro-lisp-critic/actions/workflows/testallegro.yml][https://github.com/gpcz/pro-lisp-critic/actions/workflows/testsbcl.yml/badge.svg]]
[[https://github.com/gpcz/pro-lisp-critic/actions/workflows/testccl.yml][https://github.com/gpcz/pro-lisp-critic/actions/workflows/testccl.yml/badge.svg]]
[[https://github.com/gpcz/pro-lisp-critic/actions/workflows/testecl.yml][https://github.com/gpcz/pro-lisp-critic/actions/workflows/testecl.yml/badge.svg]]
[[https://github.com/gpcz/pro-lisp-critic/actions/workflows/testallegro.yml][https://github.com/gpcz/pro-lisp-critic/actions/workflows/testallegro.yml/badge.svg]]

* PRO-LISP-CRITIC - A Lisp code critiquing package designed for professional use.

This is an ongoing project to develop Lisp Critic with features that
make it more usable in a professional setting.

New features (implemented):
- New rules for professional Lisp projects
- Ability to record deviations from rules

Planned features (not yet implemented):
- A "suggester" for new rules based on redundant code (already a function)
- Ability to critique an ASDF system rather than single files.

The original readme is available in oldREADME.org.

Usage:

Loading:

#+BEGIN_SRC lisp
  (asdf:load-system :pro-lisp-critic)
#+END_SRC

The function CRITIQUE-FILE returns a list of critiques, and
the function PRINT-CRITIQUE-RESPONSES produces a human-readable
report of the critiques.  For example:

#+BEGIN_SRC lisp
  (pro-lisp-critic:print-critique-responses
   (pro-lisp-critic:critique-file
    (asdf:system-relative-pathname
     "pro-lisp-critic"
     "t/testdata/apply-function-deviation-not.lisp")))
#+END_SRC

Produces:

#+BEGIN_EXAMPLE
----------------------------------------------------------------------
[REDACTED]/pro-lisp-critic/t/testdata/apply-function-de
iation-not.lisp
(DEFUN TEST (A) 3)

REQUIRED-DOCSTRING:
A docstring is required for this function.
----------------------------------------------------------------------
#+END_EXAMPLE

Deviations:
You can produce a deviation with the DEVIATION function like so:

#+BEGIN_SRC lisp
  (pro-lisp-critic:deviation
   :construct-type :function :construct-name "test"
   :rule :required-docstring :rationale "test")
  (defun test (a)
    3)
#+END_SRC

These deviations get read during a call to CRITIQUE-FILE
and cause the engine to remove any critique meeting the
criteria.  You can use this to do things that would be
ordinarily forbidden but might have a good reason.
